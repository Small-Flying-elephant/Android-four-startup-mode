使用EditText的addTextChangedListener(TextWatcher watcher)方法对EditText实现监听，TextWatcher是一个接口类，所以必须实现TextWatcher里的抽象方法：

public methods:
  abstract void: afterTextChanged(Editable s):this method is called to notify you that,somewhere within s ,the text has been changed.
  abstract void: beforeTextChanged(CharSequence s,int start ,int count,int after):this method is called to notify you that,within s ,the count characters beginning at start are about to be
  replaced by new text with length after.
  abstract void: onTextChanged(CharSequence s, int start , int before,int count):this method is called to notify you that, within s ,the count characters beginning at start have just replaced
  old text that had length before.

当EditText里面的内容有变化的时候，触发TextChangedListener事件，就会调用TextWatcher里面的抽象方法。
      package com.lingdududu.watcher;

      import android.app.Activity;
      import android.app.AlertDialog;
      import android.content.DialogInterface;
      import android.os.Bundle;
      import android.text.Editable;
      import android.text.TextWatcher;
      import android.util.Log;
      import android.widget.EditText;

      public class MainActivity extends Activity {
          private EditText text;
          String str;
          @Override
          public void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
              setContentView(R.layout.main);

              text = (EditText)findViewById(R.id.text);
              text.addTextChangedListener(textWatcher);
          }

          private TextWatcher textWatcher = new TextWatcher() {

              @Override
              public void afterTextChanged(Editable s) {
                  // TODO Auto-generated method stub
                  Log.d("TAG","afterTextChanged--------------->");
              }

              @Override
              public void beforeTextChanged(CharSequence s, int start, int count,
                      int after) {
                  // TODO Auto-generated method stub
                  Log.d("TAG","beforeTextChanged--------------->");
              }

               @Override
              public void onTextChanged(CharSequence s, int start, int before,
                      int count) {
                  Log.d("TAG","onTextChanged--------------->");
                  str = text.getText().toString();
                  try {
                      //if ((heighText.getText().toString())!=null)
                      Integer.parseInt(str);

                  } catch (Exception e) {
                      // TODO: handle exception
                      showDialog();
                  }

              }
          };

          private void showDialog(){
              AlertDialog dialog;
              AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
              builder.setTitle("消息").setIcon(android.R.drawable.stat_notify_error);
              builder.setMessage("你输出的整型数字有误，请改正");
              builder.setPositiveButton("确定", new DialogInterface.OnClickListener(){
                  @Override
                  public void onClick(DialogInterface dialog, int which) {
                      // TODO Auto-generated method stub

                  }
              });
              dialog = builder.create();
              dialog.show();
          }
      }
