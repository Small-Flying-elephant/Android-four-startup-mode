我们在布局文件里面写android:background和android:src这些属性，实际上解析之后执行的是view.setBackgroundResource和view.setImageResource方法，这两个方法实际上是拿到资源ID再去获取资源的drawable。他们会decode图片后，最终都是通过java层的createBitmap来完成的，需要消耗更多内存。

实际上我们可以用decodeStream来替代，因为decodeStream直接调用JNI>>nativeDecodeAsset()来完成decode，无需再使用java层的createBitmap，从而节省了java层的空间.另外我们可以设置图片的参数,例如设置为Bitmap.Config.RGB_565来减少内存开销。因为在android文档中描述Bitmap.Config.RGB_565每一个像素存在2个字节中，而默认的Bitmap.Config.ARGB_8888每一个像素则需要4个字节，理论上足足节省了一半空间。

了解这些之后，我把布局文件中的android:background去掉，在java文件中来设置背景。

如下：

BitmapFactory.Options opt = newBitmapFactory.Options();

opt.inPreferredConfig = Bitmap.Config.RGB_565;

opt.inPurgeable = true;

opt.inInputShareable = true;

//获取资源图片

InputStream is = context.getResources().openRawResource(resId);

Bitmap bitmap = BitmapFactory.decodeStream(is,null, opt);

is.close();

returnnew BitmapDrawable(context.getResources(),bitmap);


来源： https://blog.csdn.net/qq_22704297/article/details/50333189
