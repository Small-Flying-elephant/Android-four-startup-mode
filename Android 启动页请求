    InsertDataRequestHelper.requestInsertSubData(context, nextValidInsertConfigBean.id, nextValidInsertConfigBean.classId, new InsertDataRequestHelper.InsertRequestListener() {
          @Override
          public void onRequestSucceed(JSONObject object) {
              LauncherLog.releaseLog(TAG, "  request insert data bean successfully. ");
              insertDataBean = InsertDataParseHelper.parseSubInsertData(object,
                      getShouldDisplayInsertType(nextValidInsertConfigBean),
                      nextValidInsertConfigBean.startTime, nextValidInsertConfigBean.endTime,
                      nextValidInsertConfigBean.beginDate, nextValidInsertConfigBean.expireDate);
              preloadNextInsertImage(context, insertDataBean);
          }

          @Override
          public void onRequestFailed(String e) {
              LauncherLog.releaseLog(TAG, " request insert data bean failed. ");
          }
      });
    } else {
      LauncherLog.releaseLog(TAG, "nextValidInsertConfigBean is null  or  has preloaded  do not request insert data bean. ");
    }
    public interface InsertRequestListener {
      void onRequestSucceed(JSONObject object);

      void onRequestFailed(String e);
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //启动页分接口数据请求
    public static void requestInsertSubData(final Context context, final int id, final int pid, final InsertRequestListener listener) {
      InsertJsonRequest jsonRequest = new InsertJsonRequest(getInsertDataSubRequestUrl(context, id, pid), new Response.Listener<JSONObject>() {
          @Override
          public void onResponse(JSONObject response) {
              LauncherLog.releaseLog(TAG, "request insert sub data succeed. data = " + response.toString());
              if (listener != null) {
                  listener.onRequestSucceed(response);
              }
              if (response != null) {
                  try {
                      final JSONArray insertList = response.getJSONArray(KEY_SUB_INSERT_CONFIG);
                      final JSONArray cheetCareList = response.getJSONArray(KEY_SUB_CHEETCARE_CONFIG);
                      //服务端判断updateTime过时，重新下发config文件
                      //liujia v5.29 add 如果启动页或者小豹关怀任一配置文件更新，均需要更新本地的配置文件
                      if (insertList.length() > 0 || cheetCareList.length() > 0) {
                          InsertDataParseHelper.saveInsertConfigData(context, response, false);
                      }
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
              LauncherLog.releaseLog(TAG, "request insert sub data failed. error = " + error.getMessage());
              if (listener != null) {
                  listener.onRequestFailed(error.getMessage());
              }
          }
      });
      jsonRequest.setShouldCache(false);
      jsonRequest.setRetryPolicy(new DefaultRetryPolicy(REQUEST_TIMEOUT_MS,
              DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
              DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
      getRequestQueue(context).add(jsonRequest);
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //启动页分接口url
      private static String getInsertDataSubRequestUrl(Context context, int id, int pid) {
          StringBuilder builder = new StringBuilder();
          //TODO use next Url from config file?
    //        builder.append(getSubInsertBaseUrl());
          builder.append(INSERT_BASE_URL);
          builder.append(TYPE_SUB_INTERFACE);
          builder.append("sc_id=");//对应InsertBean中的id
          builder.append(id);
          builder.append("&pid=");//对应InsertBean中的pid
          builder.append(pid);
          builder.append("&updateTime=");
          builder.append(getInsertConfigUpdateTime());
          builder.append("&mcc=");
          builder.append(Commons.getMcc());
          builder.append("&apkver=");
          builder.append(KPackageManager.getPackageVersion(context, context.getPackageName()));
          builder.append("&aid=");
          builder.append(getInsertXaid());
          builder.append("&width=");
          builder.append(DimenUtils.getWindowWidth(context));
          builder.append("&height=");
          builder.append(DimenUtils.getWindowHeight(context));
          final String subUrl = builder.toString();
          LauncherLog.releaseLog(TAG, " subUrl = " + subUrl);
          return subUrl;
      }
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    public class InsertJsonRequest extends JsonObjectRequest {

      public InsertJsonRequest(String url, Response.Listener listener, Response.ErrorListener errorListener) {
          super(Method.GET, url, null, listener, errorListener);
      }

      @Override
      protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
          try {
              String jsonString = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
              return Response.success(new JSONObject(jsonString), HttpHeaderParser.parseCacheHeaders(response));
          } catch (UnsupportedEncodingException e) {
              e.printStackTrace();
              return Response.error(new ParseError(e));
          } catch (JSONException e) {
              e.printStackTrace();
              return Response.error(new ParseError(e));
          }
      }

    }
